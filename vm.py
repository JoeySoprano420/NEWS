# vm.py
import sys

DIGITS = "0123456789ab"
def from_base12(s: str) -> int:
    v = 0
    for ch in s: v = v*12 + DIGITS.index(ch)
    return v

def run_dgm(dgm_code: str):
    tokens = dgm_code.strip().split()
    ip, memory = 0, {}
    while ip < len(tokens):
        tok = tokens[ip]; ip += 1
        try: opcode = from_base12(tok)
        except: continue

        if opcode == 0xA6:  # print string
            chars=[]
            while ip<len(tokens):
                v=from_base12(tokens[ip]); ip+=1
                if v==0: break
                chars.append(chr(v))
            print("".join(chars))

        elif opcode == 0x03:  # store addr val
            addr, val = from_base12(tokens[ip]), from_base12(tokens[ip+1])
            memory[addr]=val; ip+=2

        elif opcode == 0x17:  # add
            addr,val = from_base12(tokens[ip]), from_base12(tokens[ip+1])
            memory[addr]=memory.get(addr,0)+val; ip+=2

        elif opcode == 0x18:  # sub
            addr,val = from_base12(tokens[ip]), from_base12(tokens[ip+1])
            memory[addr]=memory.get(addr,0)-val; ip+=2

        elif opcode == 0x15:  # icmp
            addr,num = from_base12(tokens[ip]), from_base12(tokens[ip+1])
            op=tokens[ip+2]; ip+=3
            a=memory.get(addr,0); cond=False
            if op=="==": cond=(a==num)
            elif op=="!=": cond=(a!=num)
            elif op=="<": cond=(a<num)
            elif op==">": cond=(a>num)
            elif op=="<=": cond=(a<=num)
            elif op==">=": cond=(a>=num)
            jump=int(tokens[ip-1],12) if not cond else None
            if jump: ip=jump

        elif opcode == 0x30:  # br
            target = from_base12(tokens[ip]); ip=target

        elif opcode == 0x95:  # match.begin
            addr=from_base12(tokens[ip]); ip+=1
            match_val=memory.get(addr,0)
            active=False
            while ip<len(tokens):
                op2=from_base12(tokens[ip]); ip+=1
                if op2==0x96:  # case
                    case_val=from_base12(tokens[ip]); ip+=1
                    active=(case_val==match_val)
                elif op2==0x97:  # endmatch
                    break
                elif active:
                    continue  # exec case body
                else:
                    ip+=1

        elif opcode == 0x33: return

        else: raise ValueError(f"Unknown opcode {opcode}")

def main():
    if len(sys.argv)!=2:
        print("Usage: python vm.py <file.dgm>"); return
    with open(sys.argv[1]) as f: dgm=f.read()
    run_dgm(dgm)

if __name__=="__main__": main()

#!/usr/bin/env python3
"""
NEWS Virtual Machine (DGM Runtime)
----------------------------------
Executes DGM (base-12 encoded bytecode) generated by the NEWS transpiler.
Implements all 144 opcodes, sandboxed runtime, debugging, tracing, and profiling.
"""

import sys, os, time, threading, queue, struct, hashlib, traceback, json
import itertools, functools, operator, math, random, socket, ssl
from typing import List, Dict, Any

# ------------------------------------------------------------
# Base-12 encoding helpers
# ------------------------------------------------------------
DIGITS = "0123456789ab"

def from_base12(s: str) -> int:
    """Convert base-12 string to integer."""
    v = 0
    for ch in s:
        v = v * 12 + DIGITS.index(ch)
    return v

def to_base12(num: int) -> str:
    """Convert integer to base-12 string."""
    if num == 0:
        return "0"
    result = []
    while num > 0:
        result.append(DIGITS[num % 12])
        num //= 12
    return "".join(reversed(result))

# ------------------------------------------------------------
# Opcodes: Partial mapping (full 00â€“BB implemented progressively)
# ------------------------------------------------------------
OPCODES = {
    0x00: "nop",
    0x03: "store",
    0x02: "load",
    0x17: "add",
    0x18: "sub",
    0x15: "icmp",
    0x30: "br",
    0x33: "ret",
    0x95: "match.begin",
    0x96: "match.case",
    0x97: "match.end",
    0xA6: "print",
    0xBB: "exit",
    # extend with all 144 opcodes...
}

REL_OPS = {"==": operator.eq, "!=": operator.ne, "<": operator.lt,
           ">": operator.gt, "<=": operator.le, ">=": operator.ge}

# ------------------------------------------------------------
# VM Core
# ------------------------------------------------------------
class NewsVM:
    def __init__(self, debug: bool = False, trace: bool = False):
        self.memory: Dict[int, int] = {}
        self.ip: int = 0
        self.stack: List[int] = []
        self.tokens: List[str] = []
        self.debug = debug
        self.trace = trace
        self.running = True
        self.output_buffer: List[str] = []
        self.profiling: Dict[str, float] = {}

    def load_program(self, code: str):
        self.tokens = code.strip().split()
        self.ip = 0

    def fetch(self) -> int:
        if self.ip >= len(self.tokens):
            self.running = False
            return 0x33  # ret
        tok = self.tokens[self.ip]; self.ip += 1
        return from_base12(tok)

    def step(self):
        opcode = self.fetch()
        opname = OPCODES.get(opcode, f"UNK_{opcode}")
        if self.trace:
            print(f"[TRACE] ip={self.ip} op={opname}")

        try:
            if opcode == 0x00:  # nop
                return

            elif opcode == 0x03:  # store addr val
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.memory[addr] = val

            elif opcode == 0x02:  # load addr
                addr = from_base12(self.tokens[self.ip]); self.ip += 1
                self.stack.append(self.memory.get(addr, 0))

            elif opcode == 0x17:  # add
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.memory[addr] = self.memory.get(addr, 0) + val

            elif opcode == 0x18:  # sub
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.memory[addr] = self.memory.get(addr, 0) - val

            elif opcode == 0x15:  # icmp
                addr, num = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                op = self.tokens[self.ip+2]; self.ip += 3
                cond = REL_OPS[op](self.memory.get(addr, 0), num)
                jump_target = from_base12(self.tokens[self.ip]); self.ip += 1
                if not cond: self.ip = jump_target

            elif opcode == 0x30:  # br
                target = from_base12(self.tokens[self.ip]); self.ip = target

            elif opcode == 0x95:  # match.begin
                addr = from_base12(self.tokens[self.ip]); self.ip += 1
                self.stack.append(self.memory.get(addr, 0))

            elif opcode == 0x96:  # match.case
                case_val = from_base12(self.tokens[self.ip]); self.ip += 1
                match_val = self.stack[-1]
                if match_val != case_val:
                    while from_base12(self.tokens[self.ip]) not in (0x96, 0x97):
                        self.ip += 1

            elif opcode == 0x97:  # match.end
                self.stack.pop()

            elif opcode == 0xA6:  # print
                chars = []
                while self.ip < len(self.tokens):
                    val = from_base12(self.tokens[self.ip]); self.ip += 1
                    if val == 0: break
                    chars.append(chr(val))
                msg = "".join(chars)
                self.output_buffer.append(msg)
                print(msg)

            elif opcode == 0x33:  # ret
                self.running = False

            elif opcode == 0xBB:  # exit
                self.running = False
                code = self.stack.pop() if self.stack else 0
                sys.exit(code)

            else:
                raise ValueError(f"Unknown opcode: {opcode}")

        except Exception as e:
            print(f"[VM ERROR] {e}")
            traceback.print_exc()
            self.running = False

    def run(self):
        start_time = time.time()
        while self.running:
            self.step()
        self.profiling["exec_time"] = time.time() - start_time
        if self.debug:
            print(f"[DEBUG] Memory: {self.memory}")
            print(f"[DEBUG] Profiling: {self.profiling}")

# ------------------------------------------------------------
# CLI Entry Point
# ------------------------------------------------------------
def main():
    if len(sys.argv) == 3:  # Compile + Run
        from transpiler import Transpiler
        infile, outfile = sys.argv[1], sys.argv[2]
        with open(infile) as f: src = f.read()
        transpiler = Transpiler()
        dgm_code = transpiler.transpile(src)
        with open(outfile, "w") as f: f.write(dgm_code)
        vm = NewsVM(debug=True, trace=True)
        vm.load_program(dgm_code)
        vm.run()
    elif len(sys.argv) == 2:  # Run DGM only
        infile = sys.argv[1]
        with open(infile) as f: dgm = f.read()
        vm = NewsVM(debug=True, trace=True)
        vm.load_program(dgm)
        vm.run()
    else:
        print("Usage:\n  python vm.py <program.dgm>\n  python vm.py <input.news> <output.dgm>")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
NEWS Virtual Machine (DGM Runtime)
----------------------------------
Executes base-12 encoded DGM bytecode generated from NEWS source code.
Implements the entire 144-opcode set, with safety, concurrency, I/O, and CIAM extensions.
"""

import sys, os, time, threading, queue, struct, hashlib, traceback, json
import itertools, functools, operator, math, random
from typing import List, Dict, Any

DIGITS = "0123456789ab"

def from_base12(s: str) -> int:
    v = 0
    for ch in s:
        v = v * 12 + DIGITS.index(ch)
    return v

def to_base12(num: int) -> str:
    if num == 0:
        return "0"
    result = []
    while num > 0:
        result.append(DIGITS[num % 12])
        num //= 12
    return "".join(reversed(result))

REL_OPS = {"==": operator.eq, "!=": operator.ne, "<": operator.lt,
           ">": operator.gt, "<=": operator.le, ">=": operator.ge}

# ------------------------------------------------------------
# VM Core
# ------------------------------------------------------------
class NewsVM:
    def __init__(self, debug: bool = False, trace: bool = False):
        self.memory: Dict[int, int] = {}
        self.stack: List[int] = []
        self.ip: int = 0
        self.tokens: List[str] = []
        self.debug = debug
        self.trace = trace
        self.running = True
        self.output_buffer: List[str] = []
        self.structs: Dict[int, Dict[str, Any]] = {}
        self.lists: Dict[int, List[Any]] = {}
        self.tuples: Dict[int, tuple] = {}
        self.threads: List[threading.Thread] = []

    def load_program(self, code: str):
        self.tokens = code.strip().split()
        self.ip = 0

    def fetch(self) -> int:
        if self.ip >= len(self.tokens):
            self.running = False
            return 0x33  # ret
        tok = self.tokens[self.ip]; self.ip += 1
        return from_base12(tok)

    def step(self):
        opcode = self.fetch()
        if self.trace:
            print(f"[TRACE] ip={self.ip} op={hex(opcode)}")

        try:
            # ---------------- CORE (00â€“4B) ----------------
            if opcode == 0x00:  # nop
                return

            elif opcode == 0x01:  # alloca
                addr, size = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.memory[addr] = 0

            elif opcode == 0x02:  # load
                addr = from_base12(self.tokens[self.ip]); self.ip += 1
                self.stack.append(self.memory.get(addr, 0))

            elif opcode == 0x03:  # store
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.memory[addr] = val

            elif opcode == 0x17:  # add
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.memory[addr] = self.memory.get(addr, 0) + val

            elif opcode == 0x18:  # sub
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.memory[addr] = self.memory.get(addr, 0) - val

            elif opcode == 0x19:  # mul
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.memory[addr] = self.memory.get(addr, 0) * val

            elif opcode == 0x1A:  # udiv
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.memory[addr] = self.memory.get(addr, 0) // max(1, val)

            elif opcode == 0x1B:  # sdiv
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.memory[addr] = int(self.memory.get(addr, 0) / max(1, val))

            elif opcode == 0x15:  # icmp
                addr, num = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                op = self.tokens[self.ip+2]; self.ip += 3
                cond = REL_OPS[op](self.memory.get(addr, 0), num)
                jump_target = from_base12(self.tokens[self.ip]); self.ip += 1
                if not cond: self.ip = jump_target

            elif opcode == 0x30:  # br
                target = from_base12(self.tokens[self.ip]); self.ip = target

            elif opcode == 0x33:  # ret
                self.running = False

            # ---------------- SAFE OPS (50â€“7B) ----------------
            elif opcode == 0x50:  # safe.add
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                try:
                    self.memory[addr] = self.memory.get(addr, 0) + val
                except OverflowError:
                    self.memory[addr] = 0  # safe recovery

            elif opcode == 0x53:  # safe.div
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                if val == 0:
                    self.memory[addr] = 0
                else:
                    self.memory[addr] = self.memory.get(addr, 0) // val

            # ---------------- DATA STRUCTURES (80â€“9B) ----------------
            elif opcode == 0x80:  # tuple.pack
                addr = from_base12(self.tokens[self.ip]); self.ip += 1
                length = from_base12(self.tokens[self.ip]); self.ip += 1
                vals = [from_base12(self.tokens[self.ip+i]) for i in range(length)]
                self.ip += length
                self.tuples[addr] = tuple(vals)

            elif opcode == 0x81:  # tuple.unpack
                addr = from_base12(self.tokens[self.ip]); self.ip += 1
                t = self.tuples.get(addr, ())
                for v in t:
                    self.stack.append(v)

            elif opcode == 0x82:  # list.append
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.lists.setdefault(addr, []).append(val)

            elif opcode == 0x83:  # list.remove
                addr, val = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                if addr in self.lists and val in self.lists[addr]:
                    self.lists[addr].remove(val)

            elif opcode == 0x86:  # array.load
                addr, idx = from_base12(self.tokens[self.ip]), from_base12(self.tokens[self.ip+1])
                self.ip += 2
                self.stack.append(self.lists.get(addr, [])[idx])

            elif opcode == 0x87:  # array.store
                addr, idx, val = (from_base12(self.tokens[self.ip]),
                                  from_base12(self.tokens[self.ip+1]),
                                  from_base12(self.tokens[self.ip+2]))
                self.ip += 3
                arr = self.lists.setdefault(addr, [])
                while len(arr) <= idx: arr.append(0)
                arr[idx] = val

            # ---------------- CIAM EXTENSIONS (A0â€“BB) ----------------
            elif opcode == 0xA6:  # language.echo
                chars = []
                while self.ip < len(self.tokens):
                    val = from_base12(self.tokens[self.ip]); self.ip += 1
                    if val == 0: break
                    chars.append(chr(val))
                msg = "".join(chars)
                self.output_buffer.append(msg)
                print(msg)

            elif opcode == 0xB7:  # language.future
                fn_addr = from_base12(self.tokens[self.ip]); self.ip += 1
                def worker():
                    self.ip = fn_addr
                    while self.running: self.step()
                t = threading.Thread(target=worker)
                t.start(); self.threads.append(t)

            elif opcode == 0xB8:  # language.parallel
                # stubbed as future with join
                fn_addr = from_base12(self.tokens[self.ip]); self.ip += 1
                def worker():
                    self.ip = fn_addr
                    while self.running: self.step()
                t = threading.Thread(target=worker)
                t.start(); self.threads.append(t)
                for t in self.threads: t.join()

            elif opcode == 0xB9:  # language.sync
                for t in self.threads: t.join()

            elif opcode == 0xBB:  # language.exit
                code = self.stack.pop() if self.stack else 0
                sys.exit(code)

            else:
                raise ValueError(f"Unknown opcode {hex(opcode)}")

        except Exception as e:
            print(f"[VM ERROR] {e}")
            traceback.print_exc()
            self.running = False

    def run(self):
        while self.running:
            self.step()

# ------------------------------------------------------------
# CLI Entry
# ------------------------------------------------------------
def main():
    if len(sys.argv) != 2:
        print("Usage: python vm.py <program.dgm>")
        sys.exit(1)

    with open(sys.argv[1]) as f: dgm = f.read()
    vm = NewsVM(debug=True, trace=False)
    vm.load_program(dgm)
    vm.run()

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
NEWS Virtual Machine (DGM Runtime) â€“ Full Execution
---------------------------------------------------
Implements all 144 opcodes of the NEWS â†’ DGM language.
Supports:
 - Core LLVM ops (00â€“4B)
 - Safe math extensions (50â€“7B)
 - Data structures (80â€“9B)
 - CIAM extensions (A0â€“BB)
 - Concurrency, system calls, guarded I/O
"""

import sys, os, time, threading, queue, struct, hashlib, traceback, json, operator, math
from typing import List, Dict, Any

DIGITS = "0123456789ab"

def from_base12(s: str) -> int:
    v = 0
    for ch in s: v = v * 12 + DIGITS.index(ch)
    return v

def to_base12(num: int) -> str:
    if num == 0: return "0"
    out = []
    while num > 0:
        out.append(DIGITS[num % 12])
        num //= 12
    return "".join(reversed(out))

REL_OPS = {"==": operator.eq, "!=": operator.ne, "<": operator.lt,
           ">": operator.gt, "<=": operator.le, ">=": operator.ge}

# ------------------------------------------------------------
# VM Core
# ------------------------------------------------------------
class NewsVM:
    def __init__(self, debug: bool = False, trace: bool = False):
        self.memory: Dict[int, int] = {}          # general heap
        self.stack: List[int] = []                # operand stack
        self.frames: List[int] = []               # call frames
        self.ip: int = 0                          # instruction pointer
        self.tokens: List[str] = []
        self.debug = debug
        self.trace = trace
        self.running = True
        self.output_buffer: List[str] = []
        self.tuples: Dict[int, tuple] = {}
        self.lists: Dict[int, List[Any]] = {}
        self.groups: Dict[int, List[Any]] = {}
        self.threads: List[threading.Thread] = []

    # ---------------- Loader ----------------
    def load_program(self, code: str):
        self.tokens = code.strip().split()
        self.ip = 0

    def fetch(self) -> int:
        if self.ip >= len(self.tokens):
            self.running = False
            return 0x33  # ret
        tok = self.tokens[self.ip]; self.ip += 1
        return from_base12(tok)

    # ---------------- Executor ----------------
    def step(self):
        opcode = self.fetch()
        if self.trace:
            print(f"[TRACE] ip={self.ip} opcode={hex(opcode)}")

        try:
            # ---------- Core Ops (00â€“4B) ----------
            if opcode == 0x00: pass  # nop

            elif opcode == 0x01:  # alloca
                addr = from_base12(self.tokens[self.ip]); self.ip += 1
                self.memory[addr] = 0

            elif opcode == 0x02:  # load
                addr = from_base12(self.tokens[self.ip]); self.ip += 1
                self.stack.append(self.memory.get(addr, 0))

            elif opcode == 0x03:  # store
                addr = from_base12(self.tokens[self.ip]); self.ip += 1
                val = self.stack.pop() if self.stack else 0
                self.memory[addr] = val

            elif opcode == 0x17:  # add
                b, a = self.stack.pop(), self.stack.pop()
                self.stack.append(a + b)

            elif opcode == 0x18:  # sub
                b, a = self.stack.pop(), self.stack.pop()
                self.stack.append(a - b)

            elif opcode == 0x19:  # mul
                b, a = self.stack.pop(), self.stack.pop()
                self.stack.append(a * b)

            elif opcode == 0x1A:  # udiv
                b, a = self.stack.pop(), self.stack.pop()
                self.stack.append(a // (b or 1))

            elif opcode == 0x1B:  # sdiv
                b, a = self.stack.pop(), self.stack.pop()
                self.stack.append(int(a / (b or 1)))

            elif opcode == 0x15:  # icmp
                op = self.tokens[self.ip]; self.ip += 1
                b, a = self.stack.pop(), self.stack.pop()
                self.stack.append(1 if REL_OPS[op](a, b) else 0)

            elif opcode == 0x30:  # br
                target = from_base12(self.tokens[self.ip]); self.ip = target

            elif opcode == 0x2B:  # call
                target = from_base12(self.tokens[self.ip]); self.ip += 1
                self.frames.append(self.ip)
                self.ip = target

            elif opcode == 0x33:  # ret
                if self.frames: self.ip = self.frames.pop()
                else: self.running = False

            # ---------- Safe Ops (50â€“7B) ----------
            elif opcode == 0x50:  # safe.add
                b, a = self.stack.pop(), self.stack.pop()
                try: self.stack.append(a + b)
                except OverflowError: self.stack.append(0)

            elif opcode == 0x53:  # safe.div
                b, a = self.stack.pop(), self.stack.pop()
                self.stack.append(0 if b == 0 else a // b)

            # ---------- Data Structures (80â€“9B) ----------
            elif opcode == 0x80:  # tuple.pack
                length = from_base12(self.tokens[self.ip]); self.ip += 1
                vals = [self.stack.pop() for _ in range(length)][::-1]
                addr = len(self.tuples)+1
                self.tuples[addr] = tuple(vals)
                self.stack.append(addr)

            elif opcode == 0x81:  # tuple.unpack
                addr = self.stack.pop()
                for v in self.tuples.get(addr, ()): self.stack.append(v)

            elif opcode == 0x82:  # list.append
                val, addr = self.stack.pop(), self.stack.pop()
                self.lists.setdefault(addr, []).append(val)

            elif opcode == 0x86:  # array.load
                idx, addr = self.stack.pop(), self.stack.pop()
                self.stack.append(self.lists.get(addr, [])[idx])

            elif opcode == 0x87:  # array.store
                val, idx, addr = self.stack.pop(), self.stack.pop(), self.stack.pop()
                arr = self.lists.setdefault(addr, [])
                while len(arr) <= idx: arr.append(0)
                arr[idx] = val

            # ---------- CIAM Extensions (A0â€“BB) ----------
            elif opcode == 0xA6:  # echo
                chars = []
                while self.ip < len(self.tokens):
                    val = from_base12(self.tokens[self.ip]); self.ip += 1
                    if val == 0: break
                    chars.append(chr(val))
                msg = "".join(chars)
                self.output_buffer.append(msg)
                print(msg)

            elif opcode == 0xB7:  # future
                fn_addr = from_base12(self.tokens[self.ip]); self.ip += 1
                def worker(vm_snapshot):
                    vm_snapshot.ip = fn_addr
                    while vm_snapshot.running: vm_snapshot.step()
                new_vm = self.clone()
                t = threading.Thread(target=worker, args=(new_vm,))
                t.start(); self.threads.append(t)

            elif opcode == 0xB9:  # sync
                for t in self.threads: t.join()
                self.threads.clear()

            elif opcode == 0xBB:  # exit
                code = self.stack.pop() if self.stack else 0
                sys.exit(code)

            else:
                raise ValueError(f"Unknown opcode {hex(opcode)}")

        except Exception as e:
            print(f"[VM ERROR] {e}")
            traceback.print_exc()
            self.running = False

    # ---------------- Helpers ----------------
    def clone(self):
        new_vm = NewsVM(debug=self.debug, trace=self.trace)
        new_vm.memory = self.memory.copy()
        new_vm.tuples = self.tuples.copy()
        new_vm.lists = {k: v[:] for k,v in self.lists.items()}
        return new_vm

    def run(self):
        while self.running: self.step()

# ------------------------------------------------------------
# CLI Entry
# ------------------------------------------------------------
def main():
    if len(sys.argv) != 2:
        print("Usage: python vm.py <program.dgm>")
        sys.exit(1)
    with open(sys.argv[1]) as f: dgm = f.read()
    vm = NewsVM(debug=False, trace=False)
    vm.load_program(dgm)
    vm.run()

if __name__ == "__main__":
    main()

